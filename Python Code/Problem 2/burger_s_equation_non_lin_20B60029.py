{"metadata":{"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T02:35:18.706254Z\",\"iopub.execute_input\":\"2021-08-06T02:35:18.706912Z\",\"iopub.status.idle\":\"2021-08-06T02:35:18.720608Z\",\"shell.execute_reply.started\":\"2021-08-06T02:35:18.706822Z\",\"shell.execute_reply\":\"2021-08-06T02:35:18.719164Z\"}}\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video/mp4\"></video>' % src \n    return HTML(html)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T02:35:18.722409Z\",\"iopub.execute_input\":\"2021-08-06T02:35:18.722908Z\",\"iopub.status.idle\":\"2021-08-06T02:36:32.138087Z\",\"shell.execute_reply.started\":\"2021-08-06T02:35:18.722862Z\",\"shell.execute_reply\":\"2021-08-06T02:36:32.136984Z\"}}\nfrom mpl_toolkits import mplot3d\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Initial and given conditions\nv = 0.1 # Diffusion coefficient\na = 0.5 # Vector field, Scalar case\ndx = 0.1\nlen_x = 10.0\nlen_y = 10.0\ndt = 0.01\nend_time = 20.0\n\nx = np.arange(0.0, len_x+dx, dx)   # number of grids, different points of x\ny = np.arange(0.0, len_y+dx, dx)   # necessary to creat two dimentional space\n\nX, Y = np.meshgrid(x,y)\n\nU = np.zeros_like(X)  # initially the T is zero\nU[:,0] = 20.0\nU[:,-1] = 20.0\nU[0,:] = 30.0\nU[-1,:] = 30.0\nU[10:40,60:90] = 150.0\n\n\nplt.figure(figsize=(20,20)) \nicounter = -1\nfor it in np.arange(0.0,end_time+dt, dt): \n    icounter = icounter + 1\n    if np.mod(icounter,20)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,U, c = U,cmap='rainbow', vmin = 0.0, vmax = 200.0)\n        ax.set_xlabel('X',fontsize = 20)\n        ax.set_ylabel('Y',fontsize = 20)\n        ax.set_zlim([0.0,200.0])\n        plt.colorbar(p)\n        plt.title('Time=%.6f'%(it),fontsize = 20)\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n    U = U - ((v*dt)/dx)*(2*U-np.roll(U,1,axis=1)-np.roll(U,1,axis=0))+((v*dt)/(dx**2))*(np.roll(U,-1,axis=1)+np.roll(U,1, axis=1)+np.roll(U,-1, axis=0)+np.roll(U,1, axis=0) - 4.0*U)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T02:36:32.139818Z\",\"iopub.execute_input\":\"2021-08-06T02:36:32.140118Z\",\"iopub.status.idle\":\"2021-08-06T02:36:37.607007Z\",\"shell.execute_reply.started\":\"2021-08-06T02:36:32.140088Z\",\"shell.execute_reply\":\"2021-08-06T02:36:37.605717Z\"}}\n!rm *.mp4\n!ffmpeg -r 8 -pattern_type glob -i '/kaggle/working/*.jpg' -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" -vcodec libx264 -pix_fmt yuv420p Burger_Nonlin.mp4\n!rm *.jpg\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T02:36:37.608741Z\",\"iopub.execute_input\":\"2021-08-06T02:36:37.609091Z\",\"iopub.status.idle\":\"2021-08-06T02:36:37.672684Z\",\"shell.execute_reply.started\":\"2021-08-06T02:36:37.609054Z\",\"shell.execute_reply\":\"2021-08-06T02:36:37.671418Z\"}}\nplay('/kaggle/working/Burger_Nonlin.mp4')","metadata":{"collapsed":false,"_kg_hide-input":false,"jupyter":{"outputs_hidden":false}},"execution_count":null,"outputs":[]}]}