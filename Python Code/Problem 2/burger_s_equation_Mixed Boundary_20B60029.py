{"cells":[{"cell_type":"code","execution_count":0,"outputs":[],"metadata":{"collapsed":false,"_kg_hide-input":false},"source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T03:58:45.282727Z\",\"iopub.execute_input\":\"2021-08-06T03:58:45.283183Z\",\"iopub.status.idle\":\"2021-08-06T03:58:45.289644Z\",\"shell.execute_reply.started\":\"2021-08-06T03:58:45.283147Z\",\"shell.execute_reply\":\"2021-08-06T03:58:45.288348Z\"}}\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video/mp4\"></video>' % src \n    return HTML(html)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T03:58:45.345206Z\",\"iopub.execute_input\":\"2021-08-06T03:58:45.345799Z\",\"iopub.status.idle\":\"2021-08-06T03:59:30.592071Z\",\"shell.execute_reply.started\":\"2021-08-06T03:58:45.345727Z\",\"shell.execute_reply\":\"2021-08-06T03:59:30.591298Z\"}}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Initial and given conditions\nv = 0.2 # Diffusion coefficient\na = 0.5 # Vector field, Scalar in this case\ndx = 0.1\nlen_x = 10.0\nlen_y = 10.0\ndt = 0.01\n#dt = d*(dx**2)/alpha\nend_time = 30.0\n\n\nx = np.arange(0.0, len_x+dx, dx)   # number of grids, different points of x\ny = np.arange(0.0, len_y+dx, dx)   # necessary to creat two dimentional space\n\nX, Y = np.meshgrid(x,y)\n# We will specify location afterwards\n\nG = 0  # Zero net flux at x-axis\nU = np.zeros_like(X)  # initially the T is zero\nU[0,:] = U[0,:] - ((a*dt)/dx)*(2*U[0,:]-(U[1,:]-2*dx*G)-np.roll(U[0,:],1,axis=0))+((v*dt)/dx**2)*(U[1,:]+(U[1,:]-2*dx*G)+np.roll(U[0,:],-1, axis=0)+np.roll(U[0,:],1, axis=0) - 4.0*U[0,:])\nU[10:50,50:70] = 200\n\n\nplt.figure(figsize=(20,20)) \nicounter = -1\nfor it in np.arange(0.0,end_time+dt, dt):\n    icounter = icounter + 1\n    if np.mod(icounter,50)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,U, c=U, cmap='plasma', vmin = 0.0, vmax = 200.0)\n        ax.set_xlabel('X',fontsize = 20)\n        ax.set_ylabel('Y',fontsize = 20)\n        ax.set_zlim([0.0,200.0])\n        plt.colorbar(p)\n        plt.title('Time=%.6f'%(it),fontsize = 20)\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n        \n    U[1:-1,:] = U[1:-1,:] - ((a*dt)/dx)*(2*U[1:-1,:]-np.roll(U[1:-1,:],1,axis=1)-np.roll(U[1:-1,:],1,axis=0))+((v*dt)/dx**2)*(np.roll(U[2:,:],-1,axis=1)+U[0:-2,:]+np.roll(U[1:-1,:],-1, axis=0)+np.roll(U[1:-1,:],1, axis=0) - 4.0*U[1:-1,:])\n    U[0,:] = U[0,:] - ((a*dt)/dx)*(2*U[0,:]-(U[1,:]-2*dx*G)-np.roll(U[0,:],1,axis=0))+((v*dt)/dx**2)*(U[1,:]+(U[1,:]-2*dx*G)+np.roll(U[0,:],-1, axis=0)+np.roll(U[0,:],1, axis=0) - 4.0*U[0,:])\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T03:59:30.593474Z\",\"iopub.execute_input\":\"2021-08-06T03:59:30.593933Z\",\"iopub.status.idle\":\"2021-08-06T03:59:35.070589Z\",\"shell.execute_reply.started\":\"2021-08-06T03:59:30.593879Z\",\"shell.execute_reply\":\"2021-08-06T03:59:35.069287Z\"}}\n!rm *.mp4\n!ffmpeg -r 10 -pattern_type glob -i '/kaggle/working/*.jpg' -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" -vcodec libx264 -pix_fmt yuv420p Burger.mp4\n!rm *.jpg\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-06T03:59:35.073276Z\",\"iopub.execute_input\":\"2021-08-06T03:59:35.073817Z\",\"iopub.status.idle\":\"2021-08-06T03:59:35.122257Z\",\"shell.execute_reply.started\":\"2021-08-06T03:59:35.073769Z\",\"shell.execute_reply\":\"2021-08-06T03:59:35.121112Z\"}}\nplay('/kaggle/working/Burger.mp4')"}],"metadata":{"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat":4,"nbformat_minor":4}