{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-05T10:09:12.086546Z\",\"iopub.execute_input\":\"2021-08-05T10:09:12.087257Z\",\"iopub.status.idle\":\"2021-08-05T10:09:12.100125Z\",\"shell.execute_reply.started\":\"2021-08-05T10:09:12.087131Z\",\"shell.execute_reply\":\"2021-08-05T10:09:12.099286Z\"}}\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video/mp4\"></video>' % src \n    return HTML(html)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-05T10:09:12.145377Z\",\"iopub.execute_input\":\"2021-08-05T10:09:12.145738Z\"}}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Initial and given conditions\nd = 0.1\nalpha = 0.7\ndx = 0.1\nlen_x = 10.0\nlen_y = 10.0\ndt = d*(dx**2)/alpha\nend_time = 1.5\n\n\nx = np.arange(0.0, len_x+dx, dx)   # number of grids, different points of x\ny = np.arange(0.0, len_y+dx, dx)   # necessary to creat two dimentional space\n\nX, Y = np.meshgrid(x,y)\n# We will specify location afterwards\n\nT = np.zeros_like(X)  # initially the T is zero\n#T[:,0] = 10.0\n#T[:,-1] = 10.0\nT[0,:] = 25.0\nT[-1,:] = 25.0\nT[45:50,45:50] = 60.0\n\n\nplt.figure(figsize=(20,20)) \nicounter = -1\nfor it in np.arange(0.0,end_time+dt, dt):\n    #if it ==0.0:\n    \n    icounter = icounter + 1\n    if np.mod(icounter,10)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,T, c=T, cmap='plasma', vmin = 0.0, vmax = 60.0)\n        ax.set_xlabel('X',fontsize = 20)\n        ax.set_ylabel('Y',fontsize = 20)\n        ax.set_zlim([0.0,60.0])\n        plt.colorbar(p)\n        plt.title('Time=%.6f'%(it),fontsize = 20)\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n    T = T + d*(np.roll(T,-1,axis=1)+np.roll(T,1,axis=1)+np.roll(T,-1, axis=0)+np.roll(T,1, axis=0) - 4.0*T)\n    T[:,0] = 10.0\n    T[:,-1] = 10.0\n    T[0,:] = 25.0\n    T[-1,:] = 25.0\n    T[45:50,45:50] = 60.0\n\n\n\n\n\n\n\n# %% [code]\n!rm *.mp4\n!ffmpeg -r 3 -pattern_type glob -i '/kaggle/working/*.jpg' -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" -vcodec libx264 -pix_fmt yuv420p Dirichlet.mp4\n!rm *.jpg\n\n# %% [code]\nplay('/kaggle/working/Dirichlet.mp4')\n\n# %% [markdown] {\"execution\":{\"iopub.status.busy\":\"2021-08-04T18:19:07.706173Z\",\"iopub.execute_input\":\"2021-08-04T18:19:07.706629Z\",\"iopub.status.idle\":\"2021-08-04T18:19:07.758285Z\",\"shell.execute_reply.started\":\"2021-08-04T18:19:07.706577Z\",\"shell.execute_reply\":\"2021-08-04T18:19:07.756979Z\"}}\n# ","metadata":{"_uuid":"f87e9696-d4d6-4205-bb9e-09cad47bb721","_cell_guid":"97de2372-3ae6-4c48-bc13-3fb23f943b0d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}