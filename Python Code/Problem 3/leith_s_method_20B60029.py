{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-07T01:15:13.967951Z\",\"iopub.execute_input\":\"2021-08-07T01:15:13.969082Z\",\"iopub.status.idle\":\"2021-08-07T01:15:13.976928Z\",\"shell.execute_reply.started\":\"2021-08-07T01:15:13.969011Z\",\"shell.execute_reply\":\"2021-08-07T01:15:13.975688Z\"}}\nfrom IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video/mp4\"></video>' % src \n    return HTML(html)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-07T01:15:13.978887Z\",\"iopub.execute_input\":\"2021-08-07T01:15:13.979253Z\",\"iopub.status.idle\":\"2021-08-07T01:15:13.998166Z\",\"shell.execute_reply.started\":\"2021-08-07T01:15:13.979218Z\",\"shell.execute_reply\":\"2021-08-07T01:15:13.996528Z\"}}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport matplotlib.animation as anm\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-07T01:15:14.001019Z\",\"iopub.execute_input\":\"2021-08-07T01:15:14.001596Z\",\"iopub.status.idle\":\"2021-08-07T01:15:23.005584Z\",\"shell.execute_reply.started\":\"2021-08-07T01:15:14.001542Z\",\"shell.execute_reply\":\"2021-08-07T01:15:23.004483Z\"}}\nu = 1.0 # wave speed\ndx = 1.0\nc = 1.01 # defines the stability of the system\ndt = c*dx/u\nlen_x = 100.0\nlen_y = 100.0\nend_time = 220.0\n\nx = np.arange(0.0, len_x+dx, dx)   # number of grids, different points of x\nt = np.arange(0.0, len_y+dx, dx)   # necessary to creat two dimentional space\nX, T = np.meshgrid(x,t)\n\n\nplt.figure(figsize=(10,7)) \nf = np.zeros_like(X)  # initially the f is zero\nf[41:60]=1.0\n\nsign = int(np.sign(u))\n\nicounter = -1\nfor it in np.arange(0.0,end_time+dt, dt):    \n    icounter = icounter + 1\n\n    if np.mod(icounter,10)==0:\n        plt.plot(T,f,'k-',label='Leiths Method')\n        plt.xlabel('x: Horizontal axis')\n        plt.ylabel('T: Amplitude')\n        plt.title('Time=%.6f'%(it),fontsize = 15)\n        plt.ylim(0.,1.2)\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n        plt.close\n        plt.grid()\n    A = (1/(2*(dx**2)))*(np.roll(f,-1,axis=0)-2*f+np.roll(f,1,axis=0))\n    B = (1/(2*dx))*(np.roll(f,-1,axis=0)-np.roll(f,1,axis=0))\n    C = f\n    f = A*((u*dt)**2)-B*(u*dt)+C\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-07T01:15:23.007426Z\",\"iopub.execute_input\":\"2021-08-07T01:15:23.007787Z\",\"iopub.status.idle\":\"2021-08-07T01:15:25.598933Z\",\"shell.execute_reply.started\":\"2021-08-07T01:15:23.007748Z\",\"shell.execute_reply\":\"2021-08-07T01:15:25.597401Z\"}}\n!rm *.mp4\n!ffmpeg -r 8.0 -pattern_type glob -i '/kaggle/working/*.jpg' -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" -vcodec libx264 -pix_fmt yuv420p Leith.mp4\n!rm *.jpg\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-08-07T01:15:25.602187Z\",\"iopub.execute_input\":\"2021-08-07T01:15:25.602538Z\",\"iopub.status.idle\":\"2021-08-07T01:15:25.616996Z\",\"shell.execute_reply.started\":\"2021-08-07T01:15:25.602503Z\",\"shell.execute_reply\":\"2021-08-07T01:15:25.615723Z\"}}\nplay('/kaggle/working/Leith.mp4')","metadata":{"_uuid":"62a357f4-2ede-4de8-ae5f-5b0f42051f97","_cell_guid":"53cb04d1-f913-499a-9198-8054eb9b0d20","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}